), data = d
)
# Model 3: grade ~ happiness + lecture_attendance
m5.1.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_h * happiness + b_la * lecture_attendance,
a ~ dnorm(0, 0.5),
b_h ~ dnorm(0, 0.5),
b_la ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.1.1)
precis(m5.1.2)
precis(m5.1.3)
n <- 100
studying <- rnorm(n)
partying <- rnorm(n)
grade <- rnorm(n, studying - partying)
d <- data.frame(studying, partying, grade)
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * studying,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * partying,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * studying + b_p * partying,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Set seed for reproducibility
set.seed(1234)
# Number of students
n <- 100
# Simulate correlated study hours and party hours
# Students who study more tend to party less
time_available <- rnorm(n)
study_hours <- rnorm(n, 0.7 * time_available, 0.7)
party_hours <- rnorm(n, -0.6 * time_available, 0.7)  # Negative correlation with study_hours
# Simulate grade as a function of both variables
# Studying increases grades, partying decreases grades
grade <- rnorm(n, 0.6 * study_hours - 0.4 * party_hours, 0.7)
# Put the data in a data frame
d <- data.frame(study_hours, party_hours, grade)
# Check the correlations
cor(d)
# Model 1: grade ~ study_hours
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ party_hours
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ study_hours + party_hours
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Compare the models
compare(m5.2.1, m5.2.2, m5.2.3)
# Visualize the masked relationships
par(mfrow = c(1, 2))
plot(study_hours, grade, col = "blue", pch = 16,
xlab = "Study Hours", ylab = "Grade", main = "Study Hours vs. Grade")
abline(lm(grade ~ study_hours), col = "red", lwd = 2)
plot(party_hours, grade, col = "green", pch = 16,
xlab = "Party Hours", ylab = "Grade", main = "Party Hours vs. Grade")
abline(lm(grade ~ party_hours), col = "red", lwd = 2)
# Set seed for reproducibility
set.seed(1234)
# Number of students
n <- 100
# Simulate correlated study hours and party hours
# Students who study more tend to party less
time_available <- rnorm(n)
study_hours <- rnorm(n, 0.7 * time_available, 0.7)
party_hours <- rnorm(n, -0.6 * time_available, 0.7)  # Negative correlation with study_hours
# Simulate grade as a function of both variables
# Studying increases grades, partying decreases grades
grade <- rnorm(n, 0.6 * study_hours - 0.4 * party_hours, 0.7)
# Put the data in a data frame
d <- data.frame(study_hours, party_hours, grade)
# Check the correlations
cor(d)
# Model 1: grade ~ study_hours
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ party_hours
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ study_hours + party_hours
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Visualize the masked relationships
par(mfrow = c(1, 2))
plot(study_hours, grade, col = "blue", pch = 16,
xlab = "Study Hours", ylab = "Grade", main = "Study Hours vs. Grade")
abline(lm(grade ~ study_hours), col = "red", lwd = 2)
plot(party_hours, grade, col = "green", pch = 16,
xlab = "Party Hours", ylab = "Grade", main = "Party Hours vs. Grade")
abline(lm(grade ~ party_hours), col = "red", lwd = 2)
# Set seed for reproducibility
set.seed(1234)
# Number of students
n <- 100
# Simulate correlated study hours and party hours
# Students who study more tend to party less
time_available <- rnorm(n)
study_hours <- rnorm(n, 0.7 * time_available, 0.7)
party_hours <- rnorm(n, -0.6 * time_available, 0.7)  # Negative correlation with study_hours
# Simulate grade as a function of both variables
# Studying increases grades, partying decreases grades
grade <- rnorm(n, 0.6 * study_hours - 0.4 * party_hours, 0.7)
# Put the data in a data frame
d <- data.frame(study_hours, party_hours, grade)
# Model 1: grade ~ study_hours
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ party_hours
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ study_hours + party_hours
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Visualize the masked relationships
par(mfrow = c(1, 2))
plot(study_hours, grade, col = "blue", pch = 16,
xlab = "Study Hours", ylab = "Grade", main = "Study Hours vs. Grade")
abline(lm(grade ~ study_hours), col = "red", lwd = 2)
plot(party_hours, grade, col = "green", pch = 16,
xlab = "Party Hours", ylab = "Grade", main = "Party Hours vs. Grade")
abline(lm(grade ~ party_hours), col = "red", lwd = 2)
# Set seed for reproducibility
set.seed(1234)
# Number of students
n <- 100
# Simulate correlated study hours and party hours
# Students who study more tend to party less
time_available <- rnorm(n)
study_hours <- rnorm(n, time_available)
party_hours <- rnorm(n, -time_available)  # Negative correlation with study_hours
# Simulate grade as a function of both variables
# Studying increases grades, partying decreases grades
grade <- rnorm(n, (study_hours - party_hours) / 2)
# Put the data in a data frame
d <- data.frame(study_hours, party_hours, grade)
# Model 1: grade ~ study_hours
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ party_hours
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ study_hours + party_hours
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Visualize the masked relationships
par(mfrow = c(1, 2))
plot(study_hours, grade, col = "blue", pch = 16,
xlab = "Study Hours", ylab = "Grade", main = "Study Hours vs. Grade")
abline(lm(grade ~ study_hours), col = "red", lwd = 2)
plot(party_hours, grade, col = "green", pch = 16,
xlab = "Party Hours", ylab = "Grade", main = "Party Hours vs. Grade")
abline(lm(grade ~ party_hours), col = "red", lwd = 2)
# Set seed for reproducibility
set.seed(1234)
# Number of students
n <- 100
# Simulate correlated study hours and party hours
# Students who study more tend to party less
time_available <- rnorm(n)
study_hours <- rnorm(n, time_available)
party_hours <- rnorm(n, time_available)  # Negative correlation with study_hours
# Simulate grade as a function of both variables
# Studying increases grades, partying decreases grades
grade <- rnorm(n, (study_hours - party_hours) / 2)
# Put the data in a data frame
d <- data.frame(study_hours, party_hours, grade)
# Model 1: grade ~ study_hours
m5.2.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ party_hours
m5.2.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ study_hours + party_hours
m5.2.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_s * study_hours + b_p * party_hours,
a ~ dnorm(0, 0.5),
b_s ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Visualize the masked relationships
par(mfrow = c(1, 2))
plot(study_hours, grade, col = "blue", pch = 16,
xlab = "Study Hours", ylab = "Grade", main = "Study Hours vs. Grade")
abline(lm(grade ~ study_hours), col = "red", lwd = 2)
plot(party_hours, grade, col = "green", pch = 16,
xlab = "Party Hours", ylab = "Grade", main = "Party Hours vs. Grade")
abline(lm(grade ~ party_hours), col = "red", lwd = 2)
n <- 100
time_at_party <- rnorm(n) #
beers_drunk <- rnorm(n, time_available)
people_talked_to <- rnorm(n, time_available)  # Negative correlation with study_hours
chance_of_getting_friends <- rnorm(n, (girls_talked_to - beers_drunk) / 2)
n <- 100
time_at_party <- rnorm(n) #
beers_drunk <- rnorm(n, time_available)
people_talked_to <- rnorm(n, time_available)  # Negative correlation with study_hours
chance_of_getting_friends <- rnorm(n, (people_talked_to - beers_drunk) / 2)
d <- data.frame(chance_of_getting_friends, beers_drunk, people_talked_to)
# Predict chance_of_getting_friends ~ beers_drunk
m5.2.1 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ people_talked_to
m5.2.2 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ beers_drunk + people_talked_to
m5.2.3 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
n <- 100
time_at_party <- rnorm(n) #
beers_drunk <- rnorm(n, time_at_party)
people_talked_to <- rnorm(n, time_at_party)  # Negative correlation with study_hours
chance_of_getting_friends <- rnorm(n, (people_talked_to - beers_drunk) / 2)
d <- data.frame(chance_of_getting_friends, beers_drunk, people_talked_to)
# Predict chance_of_getting_friends ~ beers_drunk
m5.2.1 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ people_talked_to
m5.2.2 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ beers_drunk + people_talked_to
m5.2.3 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
n <- 1000
time_at_party <- rnorm(n) #
beers_drunk <- rnorm(n, time_at_party)
people_talked_to <- rnorm(n, time_at_party)  # Negative correlation with study_hours
chance_of_getting_friends <- rnorm(n, (people_talked_to - beers_drunk) / 2)
d <- data.frame(chance_of_getting_friends, beers_drunk, people_talked_to)
# Predict chance_of_getting_friends ~ beers_drunk
m5.2.1 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ people_talked_to
m5.2.2 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Predict chance_of_getting_friends ~ beers_drunk + people_talked_to
m5.2.3 <- quap(
alist(
chance_of_getting_friends ~ dnorm(mu, sigma),
mu <- a + b_b * beers_drunk + b_p * people_talked_to,
a ~ dnorm(0, 0.5),
b_b ~ dnorm(0, 0.5),
b_p ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
precis(m5.2.1)
precis(m5.2.2)
precis(m5.2.3)
# Number of students
n <- 1000
# Simulate students
lecture_attendance <- rnorm(n)
happiness <- rnorm(n, lecture_attendance)
grade <- rnorm(n, lecture_attendance)
# Put the data in a data frame
d <- data.frame(lecture_attendance, happiness, grade)
# Model 1: grade ~ happiness
m5.1.1 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_h * happiness,
a ~ dnorm(0, 0.5),
b_h ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 2: grade ~ lecture_attendance
m5.1.2 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_la * lecture_attendance,
a ~ dnorm(0, 0.5),
b_la ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Model 3: grade ~ happiness + lecture_attendance
m5.1.3 <- quap(
alist(
grade ~ dnorm(mu, sigma),
mu <- a + b_h * happiness + b_la * lecture_attendance,
a ~ dnorm(0, 0.5),
b_h ~ dnorm(0, 0.5),
b_la ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# Look at the parameter estimates
precis(m5.1.1)
precis(m5.1.2)
precis(m5.1.3)
